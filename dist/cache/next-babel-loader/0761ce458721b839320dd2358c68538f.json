{"ast":null,"code":"import { useState, useEffect } from 'react';\nvar SCROLL_UP = 'up';\nvar SCROLL_DOWN = 'down';\nexport var useScrollDirection = function useScrollDirection() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      initialDirection = _ref.initialDirection,\n      thresholdPixels = _ref.thresholdPixels,\n      off = _ref.off;\n\n  var _useState = useState(initialDirection),\n      scrollDir = _useState[0],\n      setScrollDir = _useState[1];\n\n  useEffect(function () {\n    var threshold = thresholdPixels || 0;\n    var lastScrollY = window.pageYOffset;\n    var ticking = false;\n\n    var updateScrollDir = function updateScrollDir() {\n      var scrollY = window.pageYOffset;\n\n      if (Math.abs(scrollY - lastScrollY) < threshold) {\n        // We haven't exceeded the threshold\n        ticking = false;\n        return;\n      }\n\n      setScrollDir(scrollY > lastScrollY ? SCROLL_DOWN : SCROLL_UP);\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n      ticking = false;\n    };\n\n    var onScroll = function onScroll() {\n      if (!ticking) {\n        window.requestAnimationFrame(updateScrollDir);\n        ticking = true;\n      }\n    };\n    /**\r\n     * Bind the scroll handler if `off` is set to false.\r\n     * If `off` is set to true reset the scroll direction.\r\n     */\n\n\n    !off ? window.addEventListener('scroll', onScroll) : setScrollDir(initialDirection);\n    return function () {\n      return window.removeEventListener('scroll', onScroll);\n    };\n  }, [initialDirection, thresholdPixels, off]);\n  return scrollDir;\n};","map":{"version":3,"sources":["D:/Documents/micore-next-app/src/Helpers/useScrollDirection.js"],"names":["useState","useEffect","SCROLL_UP","SCROLL_DOWN","useScrollDirection","initialDirection","thresholdPixels","off","scrollDir","setScrollDir","threshold","lastScrollY","window","pageYOffset","ticking","updateScrollDir","scrollY","Math","abs","onScroll","requestAnimationFrame","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,IAAMC,SAAS,GAAG,IAAlB;AACA,IAAMC,WAAW,GAAG,MAApB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAqD;AAAA,iFAAP,EAAO;AAAA,MAAlDC,gBAAkD,QAAlDA,gBAAkD;AAAA,MAAhCC,eAAgC,QAAhCA,eAAgC;AAAA,MAAfC,GAAe,QAAfA,GAAe;;AAAA,kBACnDP,QAAQ,CAACK,gBAAD,CAD2C;AAAA,MAC9EG,SAD8E;AAAA,MACnEC,YADmE;;AAGrFR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,SAAS,GAAGJ,eAAe,IAAI,CAArC;AACA,QAAIK,WAAW,GAAGC,MAAM,CAACC,WAAzB;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,UAAMC,OAAO,GAAGJ,MAAM,CAACC,WAAvB;;AAEA,UAAII,IAAI,CAACC,GAAL,CAASF,OAAO,GAAGL,WAAnB,IAAkCD,SAAtC,EAAiD;AAC/C;AACAI,QAAAA,OAAO,GAAG,KAAV;AACA;AACD;;AAEDL,MAAAA,YAAY,CAACO,OAAO,GAAGL,WAAV,GAAwBR,WAAxB,GAAsCD,SAAvC,CAAZ;AACAS,MAAAA,WAAW,GAAGK,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwB,CAAtC;AACAF,MAAAA,OAAO,GAAG,KAAV;AACD,KAZD;;AAcA,QAAMK,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,UAAI,CAACL,OAAL,EAAc;AACZF,QAAAA,MAAM,CAACQ,qBAAP,CAA6BL,eAA7B;AACAD,QAAAA,OAAO,GAAG,IAAV;AACD;AACF,KALD;AAOA;;;;;;AAIA,KAACP,GAAD,GACIK,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCF,QAAlC,CADJ,GAEIV,YAAY,CAACJ,gBAAD,CAFhB;AAIA,WAAO;AAAA,aAAMO,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCH,QAArC,CAAN;AAAA,KAAP;AACD,GAnCQ,EAmCN,CAACd,gBAAD,EAAmBC,eAAnB,EAAoCC,GAApC,CAnCM,CAAT;AAqCA,SAAOC,SAAP;AACD,CAzCM","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n\r\nconst SCROLL_UP = 'up'\r\nconst SCROLL_DOWN = 'down'\r\n\r\nexport const useScrollDirection = ({ initialDirection, thresholdPixels, off } = {}) => {\r\n  const [scrollDir, setScrollDir] = useState(initialDirection)\r\n  \r\n  useEffect(() => {\r\n    const threshold = thresholdPixels || 0\r\n    let lastScrollY = window.pageYOffset\r\n    let ticking = false\r\n    \r\n    const updateScrollDir = () => {\r\n      const scrollY = window.pageYOffset\r\n      \r\n      if (Math.abs(scrollY - lastScrollY) < threshold) {\r\n        // We haven't exceeded the threshold\r\n        ticking = false\r\n        return\r\n      }\r\n      \r\n      setScrollDir(scrollY > lastScrollY ? SCROLL_DOWN : SCROLL_UP)\r\n      lastScrollY = scrollY > 0 ? scrollY : 0\r\n      ticking = false\r\n    }\r\n    \r\n    const onScroll = () => {\r\n      if (!ticking) {\r\n        window.requestAnimationFrame(updateScrollDir)\r\n        ticking = true\r\n      }\r\n    }\r\n    \r\n    /**\r\n     * Bind the scroll handler if `off` is set to false.\r\n     * If `off` is set to true reset the scroll direction.\r\n     */\r\n    !off\r\n      ? window.addEventListener('scroll', onScroll)\r\n      : setScrollDir(initialDirection)\r\n    \r\n    return () => window.removeEventListener('scroll', onScroll)\r\n  }, [initialDirection, thresholdPixels, off])\r\n  \r\n  return scrollDir\r\n}"]},"metadata":{},"sourceType":"module"}