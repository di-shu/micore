{"ast":null,"code":"let glitch;\nlet isLoaded = false;\nexport const setup = img => (p5, canvasParentRef) => {\n  p5.background('rgba(0, 0, 0, 0)');\n  p5.createCanvas(window.innerWidth, window.innerHeight).parent(canvasParentRef);\n  p5.loadImage(img, function (img) {\n    glitch = new Glitch(img, p5);\n    isLoaded = true;\n  });\n};\nexport const draw = p5 => {\n  p5.clear();\n  p5.background('rgba(0, 0, 0, 0)');\n\n  if (isLoaded) {\n    glitch.show();\n  }\n};\n\nclass Glitch {\n  constructor(img, p5) {\n    this.p5 = p5;\n    this.channelLen = 4;\n    this.imgOrigin = img;\n    this.imgOrigin.loadPixels();\n    this.copyData = [];\n    this.flowLineImgs = [];\n    this.shiftLineImgs = [];\n    this.shiftRGBs = [];\n    this.scatImgs = [];\n    this.throughFlag = true;\n    this.copyData = new Uint8ClampedArray(this.imgOrigin.pixels); // flow line\n\n    for (let i = 0; i < 1; i++) {\n      let o = {\n        pixels: null,\n        t1: this.p5.floor(this.p5.random(0, 1000)),\n        speed: this.p5.floor(this.p5.random(4, 15)),\n        randX: this.p5.floor(this.p5.random(24, 80))\n      };\n      this.flowLineImgs.push(o);\n    } // shift line\n\n\n    for (let i = 0; i < 6; i++) {\n      let o = null;\n      this.shiftLineImgs.push(o);\n    } // shift RGB\n\n\n    for (let i = 0; i < 1; i++) {\n      let o = null;\n      this.shiftRGBs.push(o);\n    } // scat imgs\n\n\n    for (let i = 0; i < 3; i++) {\n      let scatImg = {\n        img: null,\n        x: 0,\n        y: 0\n      };\n      this.scatImgs.push(scatImg);\n    }\n  }\n\n  replaceData(destImg, srcPixels) {\n    for (let y = 0; y < destImg.height; y++) {\n      for (let x = 0; x < destImg.width; x++) {\n        let r, g, b, a;\n        let index;\n        index = (y * destImg.width + x) * this.channelLen;\n        r = index;\n        g = index + 1;\n        b = index + 2;\n        a = index + 3;\n        destImg.pixels[r] = srcPixels[r];\n        destImg.pixels[g] = srcPixels[g];\n        destImg.pixels[b] = srcPixels[b];\n        destImg.pixels[a] = srcPixels[a];\n      }\n    }\n\n    destImg.updatePixels();\n  }\n\n  flowLine(srcImg, obj) {\n    let destPixels, tempY;\n    destPixels = new Uint8ClampedArray(srcImg.pixels);\n    obj.t1 %= srcImg.height;\n    obj.t1 += obj.speed;\n    tempY = this.p5.floor(this.p5.noise(obj.t1) * srcImg.height); // tempY = this.p5.floor(obj.t1)\n\n    for (let y = 0; y < srcImg.height; y++) {\n      if (tempY === y) {\n        for (let x = 0; x < srcImg.width; x++) {\n          let r, g, b, a;\n          let index;\n          index = (y * srcImg.width + x) * this.channelLen;\n          r = index;\n          g = index + 1;\n          b = index + 2;\n          a = index + 3;\n          destPixels[r] = srcImg.pixels[r] + obj.randX;\n          destPixels[g] = srcImg.pixels[g] + obj.randX;\n          destPixels[b] = srcImg.pixels[b] + obj.randX;\n          destPixels[a] = srcImg.pixels[a];\n        }\n      }\n    }\n\n    return destPixels;\n  }\n\n  shiftLine(srcImg) {\n    let offsetX;\n    let rangeMin, rangeMax;\n    let destPixels;\n    let rangeH;\n    destPixels = new Uint8ClampedArray(srcImg.pixels);\n    rangeH = srcImg.height;\n    rangeMin = this.p5.floor(this.p5.random(0, rangeH));\n    rangeMax = rangeMin + this.p5.floor(this.p5.random(1, rangeH - rangeMin));\n    offsetX = this.channelLen * this.p5.floor(this.p5.random(-40, 40));\n\n    for (let y = 0; y < srcImg.height; y++) {\n      if (y > rangeMin && y < rangeMax) {\n        for (let x = 0; x < srcImg.width; x++) {\n          let r, g, b, a;\n          let r2, g2, b2;\n          let index;\n          index = (y * srcImg.width + x) * this.channelLen;\n          r = index;\n          g = index + 1;\n          b = index + 2;\n          a = index + 3;\n          r2 = r + offsetX;\n          g2 = g + offsetX;\n          b2 = b + offsetX;\n          destPixels[r] = srcImg.pixels[r2];\n          destPixels[g] = srcImg.pixels[g2];\n          destPixels[b] = srcImg.pixels[b2];\n          destPixels[a] = srcImg.pixels[a];\n        }\n      }\n    }\n\n    return destPixels;\n  }\n\n  shiftRGB(srcImg) {\n    let randR, randG, randB;\n    let destPixels;\n    let range;\n    range = 16;\n    destPixels = new Uint8ClampedArray(srcImg.pixels);\n    randR = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen;\n    randG = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen;\n    randB = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen;\n\n    for (let y = 0; y < srcImg.height; y++) {\n      for (let x = 0; x < srcImg.width; x++) {\n        let r, g, b, a;\n        let r2, g2, b2;\n        let index;\n        index = (y * srcImg.width + x) * this.channelLen;\n        r = index;\n        g = index + 1;\n        b = index + 2;\n        a = index + 3;\n        r2 = (r + randR) % srcImg.pixels.length;\n        g2 = (g + randG) % srcImg.pixels.length;\n        b2 = (b + randB) % srcImg.pixels.length;\n        destPixels[r] = srcImg.pixels[r2];\n        destPixels[g] = srcImg.pixels[g2];\n        destPixels[b] = srcImg.pixels[b2];\n        destPixels[a] = srcImg.pixels[a];\n      }\n    }\n\n    return destPixels;\n  }\n\n  getRandomRectImg(srcImg) {\n    let startX;\n    let startY;\n    let rectW;\n    let rectH;\n    let destImg;\n    startX = this.p5.floor(this.p5.random(0, srcImg.width - 30));\n    startY = this.p5.floor(this.p5.random(0, srcImg.height - 50));\n    rectW = this.p5.floor(this.p5.random(30, srcImg.width - startX));\n    rectH = this.p5.floor(this.p5.random(1, 50));\n    destImg = srcImg.get(startX, startY, rectW, rectH);\n    destImg.loadPixels();\n    return destImg;\n  }\n\n  setImage() {\n    this.p5.push();\n    this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2);\n    this.p5.image(this.imgOrigin, 0, 0);\n    this.p5.pop();\n  }\n\n  show() {\n    //restore the original state\n    this.replaceData(this.imgOrigin, this.copyData); // sometimes pass without effect processing\n\n    let n = this.p5.floor(this.p5.random(100));\n\n    if (n > 75 && this.throughFlag) {\n      this.throughFlag = false;\n      setTimeout(() => {\n        this.throughFlag = true;\n      }, this.p5.floor(this.p5.random(40, 400)));\n    }\n\n    if (!this.throughFlag) {\n      this.p5.push();\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2);\n      this.p5.image(this.imgOrigin, 0, 0);\n      this.p5.pop();\n      return;\n    } // flow line\n\n\n    this.flowLineImgs.forEach((v, i, arr) => {\n      arr[i].pixels = this.flowLine(this.imgOrigin, v);\n\n      if (arr[i].pixels) {\n        this.replaceData(this.imgOrigin, arr[i].pixels);\n      }\n    }); // shift line\n\n    this.shiftLineImgs.forEach((v, i, arr) => {\n      if (this.p5.floor(this.p5.random(100)) > 50) {\n        arr[i] = this.shiftLine(this.imgOrigin);\n        this.replaceData(this.imgOrigin, arr[i]);\n      } else {\n        if (arr[i]) {\n          this.replaceData(this.imgOrigin, arr[i]);\n        }\n      }\n    }); // shift rgb\n\n    this.shiftRGBs.forEach((v, i, arr) => {\n      if (this.p5.floor(this.p5.random(100)) > 65) {\n        arr[i] = this.shiftRGB(this.imgOrigin);\n        this.replaceData(this.imgOrigin, arr[i]);\n      }\n    });\n    this.setImage(); // scat image\n\n    this.scatImgs.forEach(obj => {\n      this.p5.push();\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2);\n\n      if (this.p5.floor(this.p5.random(100)) > 80) {\n        obj.x = this.p5.floor(this.p5.random(-this.imgOrigin.width * 0.3, this.imgOrigin.width * 0.7));\n        obj.y = this.p5.floor(this.p5.random(-this.imgOrigin.height * 0.1, this.imgOrigin.height));\n        obj.img = this.getRandomRectImg(this.imgOrigin);\n      }\n\n      if (obj.img) {\n        this.p5.image(obj.img, obj.x, obj.y);\n      }\n\n      this.p5.pop();\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Documents/micore-next-app/src/Helpers/glitch.js"],"names":["glitch","isLoaded","setup","img","p5","canvasParentRef","background","createCanvas","window","innerWidth","innerHeight","parent","loadImage","Glitch","draw","clear","show","constructor","channelLen","imgOrigin","loadPixels","copyData","flowLineImgs","shiftLineImgs","shiftRGBs","scatImgs","throughFlag","Uint8ClampedArray","pixels","i","o","t1","floor","random","speed","randX","push","scatImg","x","y","replaceData","destImg","srcPixels","height","width","r","g","b","a","index","updatePixels","flowLine","srcImg","obj","destPixels","tempY","noise","shiftLine","offsetX","rangeMin","rangeMax","rangeH","r2","g2","b2","shiftRGB","randR","randG","randB","range","length","getRandomRectImg","startX","startY","rectW","rectH","get","setImage","translate","image","pop","n","setTimeout","forEach","v","arr"],"mappings":"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","sourcesContent":["let glitch\r\nlet isLoaded = false\r\n\r\nexport const setup = (img) => (p5, canvasParentRef) => {\r\n  p5.background('rgba(0, 0, 0, 0)')\r\n  p5.createCanvas(window.innerWidth, window.innerHeight).parent(canvasParentRef)\r\n  p5.loadImage(img, function (img) {\r\n    glitch = new Glitch(img, p5)\r\n    isLoaded = true\r\n  })\r\n}\r\n\r\nexport const draw = (p5) => {\r\n  p5.clear()\r\n  p5.background('rgba(0, 0, 0, 0)')\r\n  \r\n  if (isLoaded) {\r\n    glitch.show()\r\n  }\r\n}\r\n\r\nclass Glitch {\r\n  constructor(img, p5) {\r\n    this.p5 = p5\r\n    this.channelLen = 4\r\n    this.imgOrigin = img\r\n    this.imgOrigin.loadPixels()\r\n    this.copyData = []\r\n    this.flowLineImgs = []\r\n    this.shiftLineImgs = []\r\n    this.shiftRGBs = []\r\n    this.scatImgs = []\r\n    this.throughFlag = true\r\n    this.copyData = new Uint8ClampedArray(this.imgOrigin.pixels)\r\n  \r\n    // flow line\r\n    for (let i = 0; i < 1; i++) {\r\n      let o = {\r\n        pixels: null,\r\n        t1: this.p5.floor(this.p5.random(0, 1000)),\r\n        speed: this.p5.floor(this.p5.random(4, 15)),\r\n        randX: this.p5.floor(this.p5.random(24, 80))\r\n      }\r\n      this.flowLineImgs.push(o)\r\n    }\r\n    \r\n    // shift line\r\n    for (let i = 0; i < 6; i++) {\r\n      let o = null\r\n      this.shiftLineImgs.push(o)\r\n    }\r\n    \r\n    // shift RGB\r\n    for (let i = 0; i < 1; i++) {\r\n      let o = null\r\n      this.shiftRGBs.push(o)\r\n    }\r\n    \r\n    // scat imgs\r\n    for (let i = 0; i < 3; i++) {\r\n      let scatImg = {\r\n        img: null,\r\n        x: 0,\r\n        y: 0\r\n      }\r\n      this.scatImgs.push(scatImg)\r\n    }\r\n  }\r\n  \r\n  replaceData(destImg, srcPixels) {\r\n    for (let y = 0; y < destImg.height; y++) {\r\n      for (let x = 0; x < destImg.width; x++) {\r\n        let r, g, b, a\r\n        let index\r\n        index = (y * destImg.width + x) * this.channelLen\r\n        r = index\r\n        g = index + 1\r\n        b = index + 2\r\n        a = index + 3\r\n        destImg.pixels[r] = srcPixels[r]\r\n        destImg.pixels[g] = srcPixels[g]\r\n        destImg.pixels[b] = srcPixels[b]\r\n        destImg.pixels[a] = srcPixels[a]\r\n      }\r\n    }\r\n    \r\n    destImg.updatePixels()\r\n  }\r\n  \r\n  flowLine(srcImg, obj) {\r\n    let destPixels, tempY\r\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\r\n    obj.t1 %= srcImg.height\r\n    obj.t1 += obj.speed\r\n    tempY = this.p5.floor(this.p5.noise(obj.t1) * srcImg.height);\r\n    // tempY = this.p5.floor(obj.t1)\r\n    for (let y = 0; y < srcImg.height; y++) {\r\n      if (tempY === y) {\r\n        for (let x = 0; x < srcImg.width; x++) {\r\n          let r, g, b, a\r\n          let index\r\n          index = (y * srcImg.width + x) * this.channelLen\r\n          r = index\r\n          g = index + 1\r\n          b = index + 2\r\n          a = index + 3\r\n          destPixels[r] = srcImg.pixels[r] + obj.randX\r\n          destPixels[g] = srcImg.pixels[g] + obj.randX\r\n          destPixels[b] = srcImg.pixels[b] + obj.randX\r\n          destPixels[a] = srcImg.pixels[a]\r\n        }\r\n      }\r\n    }\r\n    return destPixels\r\n  }\r\n  \r\n  shiftLine(srcImg) {\r\n    let offsetX\r\n    let rangeMin, rangeMax\r\n    let destPixels\r\n    let rangeH\r\n    \r\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\r\n    rangeH = srcImg.height\r\n    rangeMin = this.p5.floor(this.p5.random(0, rangeH))\r\n    rangeMax = rangeMin + this.p5.floor(this.p5.random(1, rangeH - rangeMin))\r\n    offsetX = this.channelLen * this.p5.floor(this.p5.random(-40, 40))\r\n    \r\n    for (let y = 0; y < srcImg.height; y++) {\r\n      if (y > rangeMin && y < rangeMax) {\r\n        for (let x = 0; x < srcImg.width; x++) {\r\n          let r, g, b, a\r\n          let r2, g2, b2\r\n          let index\r\n          \r\n          index = (y * srcImg.width + x) * this.channelLen\r\n          r = index\r\n          g = index + 1\r\n          b = index + 2\r\n          a = index + 3\r\n          r2 = r + offsetX\r\n          g2 = g + offsetX\r\n          b2 = b + offsetX\r\n          destPixels[r] = srcImg.pixels[r2]\r\n          destPixels[g] = srcImg.pixels[g2]\r\n          destPixels[b] = srcImg.pixels[b2]\r\n          destPixels[a] = srcImg.pixels[a]\r\n        }\r\n      }\r\n    }\r\n    return destPixels\r\n  }\r\n  \r\n  shiftRGB(srcImg) {\r\n    let randR, randG, randB\r\n    let destPixels\r\n    let range\r\n    \r\n    range = 16\r\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\r\n    randR = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\r\n    randG = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\r\n    randB = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\r\n    \r\n    for (let y = 0; y < srcImg.height; y++) {\r\n      for (let x = 0; x < srcImg.width; x++) {\r\n        let r, g, b, a\r\n        let r2, g2, b2\r\n        let index\r\n        \r\n        index = (y * srcImg.width + x) * this.channelLen\r\n        r = index\r\n        g = index + 1\r\n        b = index + 2\r\n        a = index + 3\r\n        r2 = (r + randR) % srcImg.pixels.length\r\n        g2 = (g + randG) % srcImg.pixels.length\r\n        b2 = (b + randB) % srcImg.pixels.length\r\n        destPixels[r] = srcImg.pixels[r2]\r\n        destPixels[g] = srcImg.pixels[g2]\r\n        destPixels[b] = srcImg.pixels[b2]\r\n        destPixels[a] = srcImg.pixels[a]\r\n      }\r\n    }\r\n    \r\n    return destPixels\r\n  }\r\n  \r\n  getRandomRectImg(srcImg) {\r\n    let startX\r\n    let startY\r\n    let rectW\r\n    let rectH\r\n    let destImg\r\n    \r\n    startX = this.p5.floor(this.p5.random(0, srcImg.width - 30))\r\n    startY = this.p5.floor(this.p5.random(0, srcImg.height - 50))\r\n    rectW = this.p5.floor(this.p5.random(30, srcImg.width - startX))\r\n    rectH = this.p5.floor(this.p5.random(1, 50))\r\n    destImg = srcImg.get(startX, startY, rectW, rectH)\r\n    destImg.loadPixels()\r\n    \r\n    return destImg\r\n  }\r\n  \r\n  setImage() {\r\n    this.p5.push()\r\n    this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\r\n    this.p5.image(this.imgOrigin, 0, 0)\r\n    this.p5.pop()\r\n  }\r\n  \r\n  show() {\r\n    //restore the original state\r\n    this.replaceData(this.imgOrigin, this.copyData)\r\n\r\n    // sometimes pass without effect processing\r\n    let n = this.p5.floor(this.p5.random(100))\r\n\r\n    if (n > 75 && this.throughFlag) {\r\n      this.throughFlag = false\r\n      setTimeout(() => {\r\n        this.throughFlag = true\r\n      }, this.p5.floor(this.p5.random(40, 400)))\r\n    }\r\n\r\n    if (!this.throughFlag) {\r\n      this.p5.push()\r\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\r\n      this.p5.image(this.imgOrigin, 0, 0)\r\n      this.p5.pop()\r\n\r\n      return\r\n    }\r\n\r\n    // flow line\r\n    this.flowLineImgs.forEach((v, i, arr) => {\r\n      arr[i].pixels = this.flowLine(this.imgOrigin, v)\r\n      if (arr[i].pixels) {\r\n        this.replaceData(this.imgOrigin, arr[i].pixels)\r\n      }\r\n    })\r\n\r\n    // shift line\r\n    this.shiftLineImgs.forEach((v, i, arr) => {\r\n      if (this.p5.floor(this.p5.random(100)) > 50) {\r\n        arr[i] = this.shiftLine(this.imgOrigin)\r\n        this.replaceData(this.imgOrigin, arr[i])\r\n      } else {\r\n        if (arr[i]) {\r\n          this.replaceData(this.imgOrigin, arr[i])\r\n        }\r\n      }\r\n    })\r\n\r\n    // shift rgb\r\n    this.shiftRGBs.forEach((v, i, arr) => {\r\n      if (this.p5.floor(this.p5.random(100)) > 65) {\r\n        arr[i] = this.shiftRGB(this.imgOrigin)\r\n        this.replaceData(this.imgOrigin, arr[i])\r\n      }\r\n    })\r\n    \r\n    this.setImage()\r\n\r\n    // scat image\r\n    this.scatImgs.forEach((obj) => {\r\n      this.p5.push()\r\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\r\n\r\n      if (this.p5.floor(this.p5.random(100)) > 80) {\r\n        obj.x = this.p5.floor(this.p5.random(-this.imgOrigin.width * 0.3, this.imgOrigin.width * 0.7))\r\n        obj.y = this.p5.floor(this.p5.random(-this.imgOrigin.height * 0.1, this.imgOrigin.height))\r\n        obj.img = this.getRandomRectImg(this.imgOrigin)\r\n      }\r\n\r\n      if (obj.img) {\r\n        this.p5.image(obj.img, obj.x, obj.y)\r\n      }\r\n\r\n      this.p5.pop()\r\n    })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}