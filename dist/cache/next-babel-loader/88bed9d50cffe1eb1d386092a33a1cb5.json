{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nvar glitch;\nvar isLoaded = false;\nexport var setup = function setup(img) {\n  return function (p5, canvasParentRef) {\n    p5.background('rgba(0, 0, 0, 0)');\n    p5.createCanvas(window.innerWidth, window.innerHeight).parent(canvasParentRef);\n    p5.loadImage(img, function (img) {\n      glitch = new Glitch(img, p5);\n      isLoaded = true;\n    });\n  };\n};\nexport var draw = function draw(p5) {\n  p5.clear();\n  p5.background('rgba(0, 0, 0, 0)');\n\n  if (isLoaded) {\n    glitch.show();\n  }\n};\n\nvar Glitch =\n/*#__PURE__*/\nfunction () {\n  function Glitch(img, p5) {\n    _classCallCheck(this, Glitch);\n\n    this.p5 = p5;\n    this.channelLen = 4;\n    this.imgOrigin = img;\n    this.imgOrigin.loadPixels();\n    this.copyData = [];\n    this.flowLineImgs = [];\n    this.shiftLineImgs = [];\n    this.shiftRGBs = [];\n    this.scatImgs = [];\n    this.throughFlag = true;\n    this.copyData = new Uint8ClampedArray(this.imgOrigin.pixels); // flow line\n\n    for (var i = 0; i < 1; i++) {\n      var o = {\n        pixels: null,\n        t1: this.p5.floor(this.p5.random(0, 1000)),\n        speed: this.p5.floor(this.p5.random(4, 15)),\n        randX: this.p5.floor(this.p5.random(24, 80))\n      };\n      this.flowLineImgs.push(o);\n    } // shift line\n\n\n    for (var _i = 0; _i < 6; _i++) {\n      var _o = null;\n      this.shiftLineImgs.push(_o);\n    } // shift RGB\n\n\n    for (var _i2 = 0; _i2 < 1; _i2++) {\n      var _o2 = null;\n      this.shiftRGBs.push(_o2);\n    } // scat imgs\n\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var scatImg = {\n        img: null,\n        x: 0,\n        y: 0\n      };\n      this.scatImgs.push(scatImg);\n    }\n  }\n\n  _createClass(Glitch, [{\n    key: \"replaceData\",\n    value: function replaceData(destImg, srcPixels) {\n      for (var y = 0; y < destImg.height; y++) {\n        for (var x = 0; x < destImg.width; x++) {\n          var r = void 0,\n              g = void 0,\n              b = void 0,\n              a = void 0;\n          var index = void 0;\n          index = (y * destImg.width + x) * this.channelLen;\n          r = index;\n          g = index + 1;\n          b = index + 2;\n          a = index + 3;\n          destImg.pixels[r] = srcPixels[r];\n          destImg.pixels[g] = srcPixels[g];\n          destImg.pixels[b] = srcPixels[b];\n          destImg.pixels[a] = srcPixels[a];\n        }\n      }\n\n      destImg.updatePixels();\n    }\n  }, {\n    key: \"flowLine\",\n    value: function flowLine(srcImg, obj) {\n      var destPixels, tempY;\n      destPixels = new Uint8ClampedArray(srcImg.pixels);\n      obj.t1 %= srcImg.height;\n      obj.t1 += obj.speed;\n      tempY = this.p5.floor(this.p5.noise(obj.t1) * srcImg.height); // tempY = this.p5.floor(obj.t1)\n\n      for (var y = 0; y < srcImg.height; y++) {\n        if (tempY === y) {\n          for (var x = 0; x < srcImg.width; x++) {\n            var r = void 0,\n                g = void 0,\n                b = void 0,\n                a = void 0;\n            var index = void 0;\n            index = (y * srcImg.width + x) * this.channelLen;\n            r = index;\n            g = index + 1;\n            b = index + 2;\n            a = index + 3;\n            destPixels[r] = srcImg.pixels[r] + obj.randX;\n            destPixels[g] = srcImg.pixels[g] + obj.randX;\n            destPixels[b] = srcImg.pixels[b] + obj.randX;\n            destPixels[a] = srcImg.pixels[a];\n          }\n        }\n      }\n\n      return destPixels;\n    }\n  }, {\n    key: \"shiftLine\",\n    value: function shiftLine(srcImg) {\n      var offsetX;\n      var rangeMin, rangeMax;\n      var destPixels;\n      var rangeH;\n      destPixels = new Uint8ClampedArray(srcImg.pixels);\n      rangeH = srcImg.height;\n      rangeMin = this.p5.floor(this.p5.random(0, rangeH));\n      rangeMax = rangeMin + this.p5.floor(this.p5.random(1, rangeH - rangeMin));\n      offsetX = this.channelLen * this.p5.floor(this.p5.random(-40, 40));\n\n      for (var y = 0; y < srcImg.height; y++) {\n        if (y > rangeMin && y < rangeMax) {\n          for (var x = 0; x < srcImg.width; x++) {\n            var r = void 0,\n                g = void 0,\n                b = void 0,\n                a = void 0;\n            var r2 = void 0,\n                g2 = void 0,\n                b2 = void 0;\n            var index = void 0;\n            index = (y * srcImg.width + x) * this.channelLen;\n            r = index;\n            g = index + 1;\n            b = index + 2;\n            a = index + 3;\n            r2 = r + offsetX;\n            g2 = g + offsetX;\n            b2 = b + offsetX;\n            destPixels[r] = srcImg.pixels[r2];\n            destPixels[g] = srcImg.pixels[g2];\n            destPixels[b] = srcImg.pixels[b2];\n            destPixels[a] = srcImg.pixels[a];\n          }\n        }\n      }\n\n      return destPixels;\n    }\n  }, {\n    key: \"shiftRGB\",\n    value: function shiftRGB(srcImg) {\n      var randR, randG, randB;\n      var destPixels;\n      var range;\n      range = 16;\n      destPixels = new Uint8ClampedArray(srcImg.pixels);\n      randR = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen;\n      randG = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen;\n      randB = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen;\n\n      for (var y = 0; y < srcImg.height; y++) {\n        for (var x = 0; x < srcImg.width; x++) {\n          var r = void 0,\n              g = void 0,\n              b = void 0,\n              a = void 0;\n          var r2 = void 0,\n              g2 = void 0,\n              b2 = void 0;\n          var index = void 0;\n          index = (y * srcImg.width + x) * this.channelLen;\n          r = index;\n          g = index + 1;\n          b = index + 2;\n          a = index + 3;\n          r2 = (r + randR) % srcImg.pixels.length;\n          g2 = (g + randG) % srcImg.pixels.length;\n          b2 = (b + randB) % srcImg.pixels.length;\n          destPixels[r] = srcImg.pixels[r2];\n          destPixels[g] = srcImg.pixels[g2];\n          destPixels[b] = srcImg.pixels[b2];\n          destPixels[a] = srcImg.pixels[a];\n        }\n      }\n\n      return destPixels;\n    }\n  }, {\n    key: \"getRandomRectImg\",\n    value: function getRandomRectImg(srcImg) {\n      var startX;\n      var startY;\n      var rectW;\n      var rectH;\n      var destImg;\n      startX = this.p5.floor(this.p5.random(0, srcImg.width - 30));\n      startY = this.p5.floor(this.p5.random(0, srcImg.height - 50));\n      rectW = this.p5.floor(this.p5.random(30, srcImg.width - startX));\n      rectH = this.p5.floor(this.p5.random(1, 50));\n      destImg = srcImg.get(startX, startY, rectW, rectH);\n      destImg.loadPixels();\n      return destImg;\n    }\n  }, {\n    key: \"setImage\",\n    value: function setImage() {\n      this.p5.push();\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2);\n      this.p5.image(this.imgOrigin, 0, 0);\n      this.p5.pop();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this = this;\n\n      //restore the original state\n      this.replaceData(this.imgOrigin, this.copyData); // sometimes pass without effect processing\n\n      var n = this.p5.floor(this.p5.random(100));\n\n      if (n > 75 && this.throughFlag) {\n        this.throughFlag = false;\n        setTimeout(function () {\n          _this.throughFlag = true;\n        }, this.p5.floor(this.p5.random(40, 400)));\n      }\n\n      if (!this.throughFlag) {\n        this.p5.push();\n        this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2);\n        this.p5.image(this.imgOrigin, 0, 0);\n        this.p5.pop();\n        return;\n      } // flow line\n\n\n      this.flowLineImgs.forEach(function (v, i, arr) {\n        arr[i].pixels = _this.flowLine(_this.imgOrigin, v);\n\n        if (arr[i].pixels) {\n          _this.replaceData(_this.imgOrigin, arr[i].pixels);\n        }\n      }); // shift line\n\n      this.shiftLineImgs.forEach(function (v, i, arr) {\n        if (_this.p5.floor(_this.p5.random(100)) > 50) {\n          arr[i] = _this.shiftLine(_this.imgOrigin);\n\n          _this.replaceData(_this.imgOrigin, arr[i]);\n        } else {\n          if (arr[i]) {\n            _this.replaceData(_this.imgOrigin, arr[i]);\n          }\n        }\n      }); // shift rgb\n\n      this.shiftRGBs.forEach(function (v, i, arr) {\n        if (_this.p5.floor(_this.p5.random(100)) > 65) {\n          arr[i] = _this.shiftRGB(_this.imgOrigin);\n\n          _this.replaceData(_this.imgOrigin, arr[i]);\n        }\n      });\n      this.setImage(); // scat image\n\n      this.scatImgs.forEach(function (obj) {\n        _this.p5.push();\n\n        _this.p5.translate((_this.p5.width - _this.imgOrigin.width) / 2, (_this.p5.height - _this.imgOrigin.height) / 2);\n\n        if (_this.p5.floor(_this.p5.random(100)) > 80) {\n          obj.x = _this.p5.floor(_this.p5.random(-_this.imgOrigin.width * 0.3, _this.imgOrigin.width * 0.7));\n          obj.y = _this.p5.floor(_this.p5.random(-_this.imgOrigin.height * 0.1, _this.imgOrigin.height));\n          obj.img = _this.getRandomRectImg(_this.imgOrigin);\n        }\n\n        if (obj.img) {\n          _this.p5.image(obj.img, obj.x, obj.y);\n        }\n\n        _this.p5.pop();\n      });\n    }\n  }]);\n\n  return Glitch;\n}();","map":{"version":3,"sources":["D:/Documents/micore-next-app/src/Helpers/glitch.js"],"names":["glitch","isLoaded","setup","img","p5","canvasParentRef","background","createCanvas","window","innerWidth","innerHeight","parent","loadImage","Glitch","draw","clear","show","channelLen","imgOrigin","loadPixels","copyData","flowLineImgs","shiftLineImgs","shiftRGBs","scatImgs","throughFlag","Uint8ClampedArray","pixels","i","o","t1","floor","random","speed","randX","push","scatImg","x","y","destImg","srcPixels","height","width","r","g","b","a","index","updatePixels","srcImg","obj","destPixels","tempY","noise","offsetX","rangeMin","rangeMax","rangeH","r2","g2","b2","randR","randG","randB","range","length","startX","startY","rectW","rectH","get","translate","image","pop","replaceData","n","setTimeout","forEach","v","arr","flowLine","shiftLine","shiftRGB","setImage","getRandomRectImg"],"mappings":"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","sourcesContent":["let glitch\r\nlet isLoaded = false\r\n\r\nexport const setup = (img) => (p5, canvasParentRef) => {\r\n  p5.background('rgba(0, 0, 0, 0)')\r\n  p5.createCanvas(window.innerWidth, window.innerHeight).parent(canvasParentRef)\r\n  p5.loadImage(img, function (img) {\r\n    glitch = new Glitch(img, p5)\r\n    isLoaded = true\r\n  })\r\n}\r\n\r\nexport const draw = (p5) => {\r\n  p5.clear()\r\n  p5.background('rgba(0, 0, 0, 0)')\r\n  \r\n  if (isLoaded) {\r\n    glitch.show()\r\n  }\r\n}\r\n\r\nclass Glitch {\r\n  constructor(img, p5) {\r\n    this.p5 = p5\r\n    this.channelLen = 4\r\n    this.imgOrigin = img\r\n    this.imgOrigin.loadPixels()\r\n    this.copyData = []\r\n    this.flowLineImgs = []\r\n    this.shiftLineImgs = []\r\n    this.shiftRGBs = []\r\n    this.scatImgs = []\r\n    this.throughFlag = true\r\n    this.copyData = new Uint8ClampedArray(this.imgOrigin.pixels)\r\n  \r\n    // flow line\r\n    for (let i = 0; i < 1; i++) {\r\n      let o = {\r\n        pixels: null,\r\n        t1: this.p5.floor(this.p5.random(0, 1000)),\r\n        speed: this.p5.floor(this.p5.random(4, 15)),\r\n        randX: this.p5.floor(this.p5.random(24, 80))\r\n      }\r\n      this.flowLineImgs.push(o)\r\n    }\r\n    \r\n    // shift line\r\n    for (let i = 0; i < 6; i++) {\r\n      let o = null\r\n      this.shiftLineImgs.push(o)\r\n    }\r\n    \r\n    // shift RGB\r\n    for (let i = 0; i < 1; i++) {\r\n      let o = null\r\n      this.shiftRGBs.push(o)\r\n    }\r\n    \r\n    // scat imgs\r\n    for (let i = 0; i < 3; i++) {\r\n      let scatImg = {\r\n        img: null,\r\n        x: 0,\r\n        y: 0\r\n      }\r\n      this.scatImgs.push(scatImg)\r\n    }\r\n  }\r\n  \r\n  replaceData(destImg, srcPixels) {\r\n    for (let y = 0; y < destImg.height; y++) {\r\n      for (let x = 0; x < destImg.width; x++) {\r\n        let r, g, b, a\r\n        let index\r\n        index = (y * destImg.width + x) * this.channelLen\r\n        r = index\r\n        g = index + 1\r\n        b = index + 2\r\n        a = index + 3\r\n        destImg.pixels[r] = srcPixels[r]\r\n        destImg.pixels[g] = srcPixels[g]\r\n        destImg.pixels[b] = srcPixels[b]\r\n        destImg.pixels[a] = srcPixels[a]\r\n      }\r\n    }\r\n    \r\n    destImg.updatePixels()\r\n  }\r\n  \r\n  flowLine(srcImg, obj) {\r\n    let destPixels, tempY\r\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\r\n    obj.t1 %= srcImg.height\r\n    obj.t1 += obj.speed\r\n    tempY = this.p5.floor(this.p5.noise(obj.t1) * srcImg.height);\r\n    // tempY = this.p5.floor(obj.t1)\r\n    for (let y = 0; y < srcImg.height; y++) {\r\n      if (tempY === y) {\r\n        for (let x = 0; x < srcImg.width; x++) {\r\n          let r, g, b, a\r\n          let index\r\n          index = (y * srcImg.width + x) * this.channelLen\r\n          r = index\r\n          g = index + 1\r\n          b = index + 2\r\n          a = index + 3\r\n          destPixels[r] = srcImg.pixels[r] + obj.randX\r\n          destPixels[g] = srcImg.pixels[g] + obj.randX\r\n          destPixels[b] = srcImg.pixels[b] + obj.randX\r\n          destPixels[a] = srcImg.pixels[a]\r\n        }\r\n      }\r\n    }\r\n    return destPixels\r\n  }\r\n  \r\n  shiftLine(srcImg) {\r\n    let offsetX\r\n    let rangeMin, rangeMax\r\n    let destPixels\r\n    let rangeH\r\n    \r\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\r\n    rangeH = srcImg.height\r\n    rangeMin = this.p5.floor(this.p5.random(0, rangeH))\r\n    rangeMax = rangeMin + this.p5.floor(this.p5.random(1, rangeH - rangeMin))\r\n    offsetX = this.channelLen * this.p5.floor(this.p5.random(-40, 40))\r\n    \r\n    for (let y = 0; y < srcImg.height; y++) {\r\n      if (y > rangeMin && y < rangeMax) {\r\n        for (let x = 0; x < srcImg.width; x++) {\r\n          let r, g, b, a\r\n          let r2, g2, b2\r\n          let index\r\n          \r\n          index = (y * srcImg.width + x) * this.channelLen\r\n          r = index\r\n          g = index + 1\r\n          b = index + 2\r\n          a = index + 3\r\n          r2 = r + offsetX\r\n          g2 = g + offsetX\r\n          b2 = b + offsetX\r\n          destPixels[r] = srcImg.pixels[r2]\r\n          destPixels[g] = srcImg.pixels[g2]\r\n          destPixels[b] = srcImg.pixels[b2]\r\n          destPixels[a] = srcImg.pixels[a]\r\n        }\r\n      }\r\n    }\r\n    return destPixels\r\n  }\r\n  \r\n  shiftRGB(srcImg) {\r\n    let randR, randG, randB\r\n    let destPixels\r\n    let range\r\n    \r\n    range = 16\r\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\r\n    randR = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\r\n    randG = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\r\n    randB = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\r\n    \r\n    for (let y = 0; y < srcImg.height; y++) {\r\n      for (let x = 0; x < srcImg.width; x++) {\r\n        let r, g, b, a\r\n        let r2, g2, b2\r\n        let index\r\n        \r\n        index = (y * srcImg.width + x) * this.channelLen\r\n        r = index\r\n        g = index + 1\r\n        b = index + 2\r\n        a = index + 3\r\n        r2 = (r + randR) % srcImg.pixels.length\r\n        g2 = (g + randG) % srcImg.pixels.length\r\n        b2 = (b + randB) % srcImg.pixels.length\r\n        destPixels[r] = srcImg.pixels[r2]\r\n        destPixels[g] = srcImg.pixels[g2]\r\n        destPixels[b] = srcImg.pixels[b2]\r\n        destPixels[a] = srcImg.pixels[a]\r\n      }\r\n    }\r\n    \r\n    return destPixels\r\n  }\r\n  \r\n  getRandomRectImg(srcImg) {\r\n    let startX\r\n    let startY\r\n    let rectW\r\n    let rectH\r\n    let destImg\r\n    \r\n    startX = this.p5.floor(this.p5.random(0, srcImg.width - 30))\r\n    startY = this.p5.floor(this.p5.random(0, srcImg.height - 50))\r\n    rectW = this.p5.floor(this.p5.random(30, srcImg.width - startX))\r\n    rectH = this.p5.floor(this.p5.random(1, 50))\r\n    destImg = srcImg.get(startX, startY, rectW, rectH)\r\n    destImg.loadPixels()\r\n    \r\n    return destImg\r\n  }\r\n  \r\n  setImage() {\r\n    this.p5.push()\r\n    this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\r\n    this.p5.image(this.imgOrigin, 0, 0)\r\n    this.p5.pop()\r\n  }\r\n  \r\n  show() {\r\n    //restore the original state\r\n    this.replaceData(this.imgOrigin, this.copyData)\r\n\r\n    // sometimes pass without effect processing\r\n    let n = this.p5.floor(this.p5.random(100))\r\n\r\n    if (n > 75 && this.throughFlag) {\r\n      this.throughFlag = false\r\n      setTimeout(() => {\r\n        this.throughFlag = true\r\n      }, this.p5.floor(this.p5.random(40, 400)))\r\n    }\r\n\r\n    if (!this.throughFlag) {\r\n      this.p5.push()\r\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\r\n      this.p5.image(this.imgOrigin, 0, 0)\r\n      this.p5.pop()\r\n\r\n      return\r\n    }\r\n\r\n    // flow line\r\n    this.flowLineImgs.forEach((v, i, arr) => {\r\n      arr[i].pixels = this.flowLine(this.imgOrigin, v)\r\n      if (arr[i].pixels) {\r\n        this.replaceData(this.imgOrigin, arr[i].pixels)\r\n      }\r\n    })\r\n\r\n    // shift line\r\n    this.shiftLineImgs.forEach((v, i, arr) => {\r\n      if (this.p5.floor(this.p5.random(100)) > 50) {\r\n        arr[i] = this.shiftLine(this.imgOrigin)\r\n        this.replaceData(this.imgOrigin, arr[i])\r\n      } else {\r\n        if (arr[i]) {\r\n          this.replaceData(this.imgOrigin, arr[i])\r\n        }\r\n      }\r\n    })\r\n\r\n    // shift rgb\r\n    this.shiftRGBs.forEach((v, i, arr) => {\r\n      if (this.p5.floor(this.p5.random(100)) > 65) {\r\n        arr[i] = this.shiftRGB(this.imgOrigin)\r\n        this.replaceData(this.imgOrigin, arr[i])\r\n      }\r\n    })\r\n    \r\n    this.setImage()\r\n\r\n    // scat image\r\n    this.scatImgs.forEach((obj) => {\r\n      this.p5.push()\r\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\r\n\r\n      if (this.p5.floor(this.p5.random(100)) > 80) {\r\n        obj.x = this.p5.floor(this.p5.random(-this.imgOrigin.width * 0.3, this.imgOrigin.width * 0.7))\r\n        obj.y = this.p5.floor(this.p5.random(-this.imgOrigin.height * 0.1, this.imgOrigin.height))\r\n        obj.img = this.getRandomRectImg(this.imgOrigin)\r\n      }\r\n\r\n      if (obj.img) {\r\n        this.p5.image(obj.img, obj.x, obj.y)\r\n      }\r\n\r\n      this.p5.pop()\r\n    })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}