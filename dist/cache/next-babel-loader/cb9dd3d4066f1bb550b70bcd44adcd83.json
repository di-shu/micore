{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\micore-next-app\\\\src\\\\Components\\\\SectionsComponents\\\\Projects\\\\TypeSomething.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nexport var TypeSomething = function TypeSomething(_ref) {\n  var content = _ref.content,\n      whiteText = _ref.whiteText,\n      size = _ref.size;\n  return __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, content && content.map(function (text, index) {\n    return __jsx(Col, {\n      key: index,\n      xs: 6,\n      md: size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      className: \"text-with-dot \".concat(whiteText ? 'is-white' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, text));\n  }));\n};","map":{"version":3,"sources":["D:/Documents/micore-next-app/src/Components/SectionsComponents/Projects/TypeSomething.js"],"names":["React","Row","Col","TypeSomething","content","whiteText","size","map","text","index"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAkC;AAAA,MAA/BC,OAA+B,QAA/BA,OAA+B;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC7D,SACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,IAAIA,OAAO,CAACG,GAAR,CAAY,UAACC,IAAD,EAAOC,KAAP;AAAA,WACtB,MAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,EAAE,EAAE,CAArB;AAAwB,MAAA,EAAE,EAAEH,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,0BAAmBD,SAAS,GAAG,UAAH,GAAgB,EAA5C,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+DG,IAA/D,CADF,CADsB;AAAA,GAAZ,CADd,CADF;AASD,CAVM","sourcesContent":["import React from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nexport const TypeSomething = ({ content, whiteText, size }) => {\r\n  return (\r\n    <Row>\r\n      {content && content.map((text, index) => (\r\n        <Col key={index} xs={6} md={size}>\r\n          <p className={`text-with-dot ${whiteText ? 'is-white' : ''}`}>{text}</p>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}