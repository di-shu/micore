{"version":3,"file":"static/webpack/static/development/pages/index.js.e5730f64a5e7baf21e2d.hot-update.js","sources":["webpack:///./src/Components/Tab/TabWrap.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport Tab from 'react-bootstrap/Tab'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Nav from 'react-bootstrap/Nav'\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion'\nimport { ActiveLink, ImageWrapper } from '../SectionsComponents'\nimport { AnimationClass, useDeviceDetect } from '../../Helpers'\n\nconst CardWrap = styled(Col)`\n  height: 200px;\n  display: flex;\n  align-items: flex-end;\n  overflow: hidden;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    transform: translateX(0);\n    transition: all 1s cubic-bezier(0.64, 0.04, 0.35, 1);\n    transition-delay: ${props => props.delay}s;\n    background-color: #10151b;\n    z-index: 5;\n  }\n`\n\nexport const TabWrap = ({ animation, tabs, isSlice, isSkills }) => {\n  const getProjects = (arr) => { return [] }//isSlice ? arr : arr.slice(0, 6)\n  const { mobile, desktop } = useDeviceDetect()\n  \n  console.log(tabs)\n  \n  useEffect(() => {\n    // tabs.map((tab) => tab.content && tab.content.map((content) => content.delay = Number(Math.random().toFixed(2))))\n  }, [])\n  \n  return (\n    <Tab.Container id=\"portfolio-tabs\" defaultActiveKey={tabs[0].key} transition={false}>\n      <Nav variant=\"pills\" className={AnimationClass({ animation, className: 'tab-wrap' })}>\n        {tabs.map((tab, index) => (\n          <Nav.Item key={`${tab.key}_${index}`} className=\"tab-item\">\n            <Nav.Link eventKey={tab.key} className=\"tab-link\">{tab.label}</Nav.Link>\n          </Nav.Item>\n        ))}\n      </Nav>\n      <Tab.Content className={AnimationClass({ animation, className: 'tab-content-wrap' })}>\n        {tabs.map((tab, index) => (\n          <Tab.Pane key={`tab_${index}`} eventKey={tab.key}>\n            {isSkills ? (\n              <Accordion defaultActiveKey={!mobile && 'panel1'}>\n                {tab.content.map((content, index) => (\n                  <Card key={`skill_${index}`} className=\"skill-row\">\n                    <Card.Header className=\"skill-header\">\n                      <Accordion.Toggle as={Card.Header} eventKey={mobile ? content.value : 'panel1'} className=\"skill-toggle\">\n                        <p className=\"skill-name\">{content.name}</p>\n                        <ImageWrapper src={content.icon} className=\"skill-icon\"/>\n                      </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey={mobile ? content.value : 'panel1'} className=\"skill-collapse\">\n                      <Card.Body className=\"skill-body\">\n                        <p className=\"skill-description\">{content.description}</p>\n                      </Card.Body>\n                    </Accordion.Collapse>\n                  </Card>\n                ))}\n              </Accordion>\n            ) : (\n              <Row>\n                {tab.content && getProjects(tab.content).map((content, index) => (\n                  <CardWrap\n                    key={`card_${index}`}\n                    xs={content.size.xs}\n                    md={content.size.md}\n                    lg={content.size.lg}\n                    xl={content.size.xl}\n                    delay={content.delay}\n                    className={AnimationClass({ animation, className: 'card-wrap' })}\n                  >\n                    <ActiveLink link={content.link} className=\"project-nav-link\"/>\n                    <ImageWrapper src={content.img} className=\"project-image\"/>\n                    <h6 className=\"project-title\">{content.title}</h6>\n                    {desktop && <p className=\"project-link\" children=\"View project\"/>}\n                  </CardWrap>\n                ))}\n              </Row>\n            )}\n          </Tab.Pane>\n        ))}\n      </Tab.Content>\n    </Tab.Container>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;A","sourceRoot":""}