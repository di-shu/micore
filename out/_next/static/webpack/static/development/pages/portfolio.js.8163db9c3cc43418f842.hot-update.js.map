{"version":3,"file":"static/webpack/static/development/pages/portfolio.js.8163db9c3cc43418f842.hot-update.js","sources":["webpack:///./src/Helpers/glitch.js"],"sourcesContent":["let glitch\nlet isLoaded = false\n\nexport const setup = ({ statue, bg = 'rgba(255, 255, 255, 0)', ...other }) => (p5, canvasParentRef) => {\n  p5.createCanvas(other.statueW, other.statueH).parent(canvasParentRef)\n  p5.background(0)\n  p5.loadImage(statue, function (img) {\n    glitch = new Glitch(img, p5, other)\n    isLoaded = true\n  })\n}\n\nexport const draw = (p5) => {\n  p5.clear()\n  p5.background('rgba(255, 255, 255, 0)')\n  p5.setRed(255)\n  if (isLoaded) {\n    glitch.show()\n  }\n}\n\nclass Glitch {\n  constructor(img, p5, params) {\n    this.p5 = p5\n    this.params = params\n    this.channelLen = 4\n    this.imgOrigin = img\n    this.imgOrigin.loadPixels()\n    this.copyData = []\n    this.flowLineImgs = []\n    this.shiftLineImgs = []\n    this.shiftRGBs = []\n    this.scatImgs = []\n    this.throughFlag = true\n    this.copyData = new Uint8ClampedArray(this.imgOrigin.pixels)\n\n    this.offsetX = this.params.offsetX\n    this.offsetY = this.params.offsetY\n    this.imgPosX = 0\n    this.imgPosY = 0\n    this.imgW = this.params.proportions === '3/4' ? (this.p5.height * 3) / 4 : this.params.statueW\n    this.imgH = this.params.statueH\n\n    switch(this.params.posX) {\n      case 'left':\n        this.imgPosX = 0 + this.offsetX\n        break\n      case 'center':\n        this.imgPosX = ((this.p5.width - this.imgW) / 2) + this.offsetX\n        break\n      case 'right':\n        this.imgPosX = (this.p5.width - this.imgW) + this.offsetX\n        break\n    }\n\n    switch (this.params.posY) {\n      case 'top':\n        this.imgPosY = 0 + this.offsetY\n        break\n      case 'center':\n        this.imgPosY = ((this.p5.height - this.imgH) / 2) + this.offsetY\n        break\n      case 'bottom':\n        this.imgPosY = (this.p5.height - this.imgH) + this.offsetY\n    }\n\n    // flow line\n    for (let i = 0; i < 1; i++) {\n      let o = {\n        pixels: null,\n        t1: this.p5.floor(this.p5.random(0, 1000)),\n        speed: this.p5.floor(this.p5.random(4, 15)),\n        randX: this.p5.floor(this.p5.random(24, 80))\n      }\n      this.flowLineImgs.push(o)\n    }\n    \n    // shift line\n    for (let i = 0; i < 6; i++) {\n      let o = null\n      this.shiftLineImgs.push(o)\n    }\n    \n    // shift RGB\n    for (let i = 0; i < 1; i++) {\n      let o = null\n      this.shiftRGBs.push(o)\n    }\n    \n    // scat images\n    for (let i = 0; i < 3; i++) {\n      let scatImg = {\n        img: null,\n        x: 0,\n        y: 0\n      }\n      this.scatImgs.push(scatImg)\n    }\n  }\n  \n  replaceData(destImg, srcPixels) {\n    for (let y = 0; y < destImg.height; y++) {\n      for (let x = 0; x < destImg.width; x++) {\n        let r, g, b, a\n        let index\n        index = (y * destImg.width + x) * this.channelLen\n        r = index\n        g = index + 1\n        b = index + 2\n        a = index + 3\n        destImg.pixels[r] = srcPixels[r]\n        destImg.pixels[g] = srcPixels[g]\n        destImg.pixels[b] = srcPixels[b]\n        destImg.pixels[a] = srcPixels[a]\n      }\n    }\n    \n    destImg.updatePixels()\n  }\n  \n  flowLine(srcImg, obj) {\n    let destPixels, tempY\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\n    obj.t1 %= srcImg.height\n    obj.t1 += obj.speed\n    tempY = this.p5.floor(this.p5.noise(obj.t1) * srcImg.height);\n    // tempY = this.p5.floor(obj.t1)\n    for (let y = 0; y < srcImg.height; y++) {\n      if (tempY === y) {\n        for (let x = 0; x < srcImg.width; x++) {\n          let r, g, b, a\n          let index\n          index = (y * srcImg.width + x) * this.channelLen\n          r = index\n          g = index + 1\n          b = index + 2\n          a = index + 3\n          destPixels[r] = srcImg.pixels[r] + obj.randX\n          destPixels[g] = srcImg.pixels[g] + obj.randX\n          destPixels[b] = srcImg.pixels[b] + obj.randX\n          destPixels[a] = srcImg.pixels[a]\n        }\n      }\n    }\n    return destPixels\n  }\n  \n  shiftLine(srcImg) {\n    let offsetX\n    let rangeMin, rangeMax\n    let destPixels\n    let rangeH\n    \n    destPixels = new Uint8ClampedArray(srcImg.pixels)\n    rangeH = srcImg.height\n    rangeMin = this.p5.floor(this.p5.random(0, rangeH))\n    rangeMax = rangeMin + this.p5.floor(this.p5.random(1, rangeH - rangeMin))\n    offsetX = this.channelLen * this.p5.floor(this.p5.random(-40, 40))\n    \n    for (let y = 0; y < srcImg.height; y++) {\n      if (y > rangeMin && y < rangeMax) {\n        for (let x = 0; x < srcImg.width; x++) {\n          let r, g, b, a\n          let r2, g2, b2\n          let index\n          \n          index = (y * srcImg.width + x) * this.channelLen\n          r = index\n          g = index + 1\n          b = index + 2\n          a = index + 3\n          r2 = r + offsetX\n          g2 = g + offsetX\n          b2 = b + offsetX\n          destPixels[r] = srcImg.pixels[r2]\n          destPixels[g] = srcImg.pixels[g2]\n          destPixels[b] = srcImg.pixels[b2]\n          destPixels[a] = srcImg.pixels[a]\n        }\n      }\n    }\n    return destPixels\n  }\n  \n  shiftRGB(srcImg) {\n    let randR, randG, randB\n    let destPixels\n    let range\n    \n    range = 16\n    destPixels = new Uint8ClampedArray(srcImg.pixels)\n    randR = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\n    randG = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\n    randB = (this.p5.floor(this.p5.random(-range, range)) * srcImg.width + this.p5.floor(this.p5.random(-range, range))) * this.channelLen\n    \n    for (let y = 0; y < srcImg.height; y++) {\n      for (let x = 0; x < srcImg.width; x++) {\n        let r, g, b, a\n        let r2, g2, b2\n        let index\n        \n        index = (y * srcImg.width + x) * this.channelLen\n        r = index\n        g = index + 1\n        b = index + 2\n        a = index + 3\n        r2 = (r + randR) % srcImg.pixels.length\n        g2 = (g + randG) % srcImg.pixels.length\n        b2 = (b + randB) % srcImg.pixels.length\n        destPixels[r] = srcImg.pixels[r2]\n        destPixels[g] = srcImg.pixels[g2]\n        destPixels[b] = srcImg.pixels[b2]\n        destPixels[a] = srcImg.pixels[a]\n      }\n    }\n    \n    return destPixels\n  }\n  \n  getRandomRectImg(srcImg) {\n    let startX\n    let startY\n    let rectW\n    let rectH\n    let destImg\n    \n    startX = this.p5.floor(this.p5.random(0, srcImg.width - 30))\n    startY = this.p5.floor(this.p5.random(0, srcImg.height - 50))\n    rectW = this.p5.floor(this.p5.random(30, srcImg.width - startX))\n    rectH = this.p5.floor(this.p5.random(1, 50))\n    destImg = srcImg.get(startX, startY, rectW, rectH)\n    destImg.loadPixels()\n    \n    return destImg\n  }\n  \n  setImage() {\n    this.p5.push()\n    this.p5.image(this.imgOrigin, this.imgPosX, this.imgPosY, this.imgW, this.imgH)\n    this.p5.pop()\n  }\n  \n  show() {\n    this.replaceData(this.imgOrigin, this.copyData)\n    let n = this.p5.floor(this.p5.random(100))\n\n    if (n > 75 && this.throughFlag) {\n      this.throughFlag = false\n      setTimeout(() => {\n        this.throughFlag = true\n      }, this.p5.floor(this.p5.random(40, 400)))\n    }\n\n    if (!this.throughFlag) {\n      this.p5.push()\n      this.p5.image(this.imgOrigin, this.imgPosX, this.imgPosY, this.imgW, this.imgH)\n      this.p5.pop()\n\n      return\n    }\n\n    // flow line\n    this.flowLineImgs.forEach((v, i, arr) => {\n      arr[i].pixels = this.flowLine(this.imgOrigin, v)\n      if (arr[i].pixels) {\n        this.replaceData(this.imgOrigin, arr[i].pixels)\n      }\n    })\n\n    // shift line\n    this.shiftLineImgs.forEach((v, i, arr) => {\n      if (this.p5.floor(this.p5.random(100)) > 50) {\n        arr[i] = this.shiftLine(this.imgOrigin)\n        this.replaceData(this.imgOrigin, arr[i])\n      } else {\n        if (arr[i]) {\n          this.replaceData(this.imgOrigin, arr[i])\n        }\n      }\n    })\n\n    // shift rgb\n    this.shiftRGBs.forEach((v, i, arr) => {\n      if (this.p5.floor(this.p5.random(100)) > 65) {\n        arr[i] = this.shiftRGB(this.imgOrigin)\n        this.replaceData(this.imgOrigin, arr[i])\n      }\n    })\n    \n    this.setImage()\n\n    // scat image\n    this.scatImgs.forEach((obj) => {\n      this.p5.push()\n      this.p5.translate((this.p5.width - this.imgOrigin.width) / 2, (this.p5.height - this.imgOrigin.height) / 2)\n\n      if (this.p5.floor(this.p5.random(100)) > 80) {\n        obj.x = this.p5.floor(this.p5.random(-this.imgOrigin.width * 0.3, this.imgOrigin.width * 0.7))\n        obj.y = this.p5.floor(this.p5.random(-this.imgOrigin.height * 0.1, this.imgOrigin.height))\n        obj.img = this.getRandomRectImg(this.imgOrigin)\n      }\n\n      if (obj.img) {\n        this.p5.image(obj.img, obj.x, obj.y)\n      }\n\n      this.p5.pop()\n    })\n  }\n}"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhSA;;;;A","sourceRoot":""}