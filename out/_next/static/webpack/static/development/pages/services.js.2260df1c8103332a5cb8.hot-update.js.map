{"version":3,"file":"static/webpack/static/development/pages/services.js.2260df1c8103332a5cb8.hot-update.js","sources":["webpack:///./src/Components/SectionsComponents/Services/ServiceMainSection.js","webpack:///./src/Components/SectionsComponents/index.js","webpack:///./src/Components/index.js","webpack:///./src/Helpers/toggleGlitch.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport dynamic from 'next/dynamic'\nimport { ScrollBox } from '../ScrollBox'\nimport ReactHtmlParser from 'react-html-parser'\nimport { draw, setup, useDeviceDetect } from '../../../Helpers'\nimport { ImageWrapper, MyScrollAnimation, SectionDesc, SectionLayout, SectionTitle } from '../../SectionsComponents'\nimport {toggleGlitch} from \"../../../Helpers/toggleGlitch\";\n\nconst Sketch = dynamic(() => import('react-p5'), { ssr: false })\n\nconst SectionHeader = ({ statue, options }) => {\n    const { desktop } = useDeviceDetect()\n    const wrapper = useRef(null)\n    const { scrolled } = toggleGlitch(wrapper)\n\n  return (\n    <>\n      <MyScrollAnimation delay={[400]}>\n        <ImageWrapper isDot/>\n      </MyScrollAnimation>\n      {desktop ? (\n        <MyScrollAnimation animationName=\"fadeIn\" delay={[600]}>\n            <div ref={wrapper} className=\"main-statue-wrapper\">\n                {scrolled ? <Sketch setup={setup(options)} draw={draw} className=\"section-image-wrap main-statue\"/> : ''}\n            </div>\n        </MyScrollAnimation>\n      ) : (\n        <MyScrollAnimation animationName=\"fadeIn\" delay={[600]}>\n          <ImageWrapper src={statue} className=\"main-statue\"/>\n        </MyScrollAnimation>\n      )}\n      <ScrollBox/>\n    </>\n  )\n}\n\nexport const ServiceMainSection = ({ title, desc, statue, statueParams }) => {\n  return (\n    <SectionLayout id=\"service-main-section\" Footer={() => <SectionHeader statue={statue} options={statueParams}/>}>\n      <MyScrollAnimation delay={[0, 200]}>\n        <SectionTitle title={title} main isContentWhite/>\n        <SectionDesc isContentWhite children={ReactHtmlParser(desc)}/>\n      </MyScrollAnimation>\n    </SectionLayout>\n  )\n}\n","export * from './Blob'\nexport * from './Layout'\nexport * from './Services'\nexport * from './Projects'\nexport * from './ScrollBox'\nexport * from './ActiveLink'\nexport * from './SeeMoreLink'\nexport * from './SectionInfo'\nexport * from './SocialsWrap'\nexport * from './MainWrapper'\nexport * from './ImageWrapper'\nexport * from './ApolloStatue'\nexport * from './SectionLayout'\nexport * from './SectionWrapper'\nexport * from './MyScrollAnimation'\n","export * from './Tab'\nexport * from './Pages'\nexport * from './Modals'\nexport * from './Config'\nexport * from './Inputs'\nexport * from './FullPage'\nexport * from './Sections'\nexport * from './SiteHeader'\nexport * from './SectionsComponents'\n","import {useEffect, useState} from \"react\";\n\nexport const toggleGlitch = (wrap) => {\n    const [scrolled, setScrolled] = useState(true)\n\n    useEffect(() => {\n        const handleScroll = () => {\n            if(wrap) {\n                const elem = wrap.current;\n                if(window.scrollY > elem.getBoundingClientRect().height + 50) {\n                    setScrolled(false)\n                } else if(window.scrollY < elem.getBoundingClientRect().height + 50) {\n                    setScrolled(true)\n                }\n            }\n        }\n\n\n        if(wrap) {\n            document.addEventListener('scroll', handleScroll)\n        }\n\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [])\n\n    return { scrolled }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbsourceRoot":""}